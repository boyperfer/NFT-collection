{"ast":null,"code":"import { takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { fetchPaymentTransactionSuccess, fetchPaymentTransactionFailure } from './transaction.actions';\nimport TransactionActionTypes from './transaction.types';\nfunction* fetchPaymentTransaction() {\n  try {\n    const instance = axios.create({\n      baseURL: 'http://localhost:3002' // Set your desired port here\n    });\n\n    const transactions = yield call(instance.get, '/api/getPaymentTransactions'); // Adjust the API endpoint as needed\n    yield put(fetchPaymentTransactionSuccess(transactions.data));\n  } catch (error) {\n    yield put(fetchPaymentTransactionFailure(error.message));\n  }\n}\nexport function* fetchPaymentTransactionAsync() {\n  yield takeLatest(TransactionActionTypes.FETCH_PAYMENT_TRANSACTION_START, fetchPaymentTransaction);\n}\nfunction* fetchNFTTransaction() {\n  try {\n    const instance = axios.create({\n      baseURL: 'http://localhost:3002' // Set your desired port here\n    });\n\n    const transactions = yield call(instance.get, '/api/getNFTTransactions'); // Adjust the API endpoint as needed\n    yield put(fetchNFTTransactionSuccess(transactions.data));\n  } catch (error) {\n    yield put(fetchNFTTransactionFailure(error.message));\n  }\n}\nexport function* fetchNFTTransactionAsync() {\n  yield takeLatest(TransactionActionTypes.FETCH_NFT_TRANSACTION_START, fetchNFTTransaction);\n}","map":{"version":3,"names":["takeLatest","put","call","axios","fetchPaymentTransactionSuccess","fetchPaymentTransactionFailure","TransactionActionTypes","fetchPaymentTransaction","instance","create","baseURL","transactions","get","data","error","message","fetchPaymentTransactionAsync","FETCH_PAYMENT_TRANSACTION_START","fetchNFTTransaction","fetchNFTTransactionSuccess","fetchNFTTransactionFailure","fetchNFTTransactionAsync","FETCH_NFT_TRANSACTION_START"],"sources":["/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/redux/transaction/transaction.sagas.js"],"sourcesContent":["import {takeLatest, put, call} from 'redux-saga/effects';\nimport axios from 'axios';\nimport { fetchPaymentTransactionSuccess, fetchPaymentTransactionFailure } from './transaction.actions';\nimport TransactionActionTypes from './transaction.types';\n\nfunction * fetchPaymentTransaction() {\n\ttry {\n\t\tconst instance = axios.create({\n\t\t\tbaseURL: 'http://localhost:3002', // Set your desired port here\n\t\t});\n\t\tconst transactions = yield call(instance.get, '/api/getPaymentTransactions'); // Adjust the API endpoint as needed\n\t\tyield put(fetchPaymentTransactionSuccess(transactions.data));\n\t} catch (error) {\n\t\tyield put(fetchPaymentTransactionFailure(error.message));\n\t}\n}\n\nexport function * fetchPaymentTransactionAsync() {\n\tyield takeLatest(TransactionActionTypes.FETCH_PAYMENT_TRANSACTION_START, fetchPaymentTransaction);\n}\n\nfunction * fetchNFTTransaction() {\n\ttry {\n\t\tconst instance = axios.create({\n\t\t\tbaseURL: 'http://localhost:3002', // Set your desired port here\n\t\t});\n\t\tconst transactions = yield call(instance.get, '/api/getNFTTransactions'); // Adjust the API endpoint as needed\n\t\tyield put(fetchNFTTransactionSuccess(transactions.data));\n\t} catch (error) {\n\t\tyield put(fetchNFTTransactionFailure(error.message));\n\t}\n}\n\nexport function * fetchNFTTransactionAsync() {\n\tyield takeLatest(TransactionActionTypes.FETCH_NFT_TRANSACTION_START, fetchNFTTransaction);\n}\n\n\n\n"],"mappings":"AAAA,SAAQA,UAAU,EAAEC,GAAG,EAAEC,IAAI,QAAO,oBAAoB;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,8BAA8B,EAAEC,8BAA8B,QAAQ,uBAAuB;AACtG,OAAOC,sBAAsB,MAAM,qBAAqB;AAExD,UAAWC,uBAAuBA,CAAA,EAAG;EACpC,IAAI;IACH,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;MAC7BC,OAAO,EAAE,uBAAuB,CAAE;IACnC,CAAC,CAAC;;IACF,MAAMC,YAAY,GAAG,MAAMT,IAAI,CAACM,QAAQ,CAACI,GAAG,EAAE,6BAA6B,CAAC,CAAC,CAAC;IAC9E,MAAMX,GAAG,CAACG,8BAA8B,CAACO,YAAY,CAACE,IAAI,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACf,MAAMb,GAAG,CAACI,8BAA8B,CAACS,KAAK,CAACC,OAAO,CAAC,CAAC;EACzD;AACD;AAEA,OAAO,UAAWC,4BAA4BA,CAAA,EAAG;EAChD,MAAMhB,UAAU,CAACM,sBAAsB,CAACW,+BAA+B,EAAEV,uBAAuB,CAAC;AAClG;AAEA,UAAWW,mBAAmBA,CAAA,EAAG;EAChC,IAAI;IACH,MAAMV,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;MAC7BC,OAAO,EAAE,uBAAuB,CAAE;IACnC,CAAC,CAAC;;IACF,MAAMC,YAAY,GAAG,MAAMT,IAAI,CAACM,QAAQ,CAACI,GAAG,EAAE,yBAAyB,CAAC,CAAC,CAAC;IAC1E,MAAMX,GAAG,CAACkB,0BAA0B,CAACR,YAAY,CAACE,IAAI,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACf,MAAMb,GAAG,CAACmB,0BAA0B,CAACN,KAAK,CAACC,OAAO,CAAC,CAAC;EACrD;AACD;AAEA,OAAO,UAAWM,wBAAwBA,CAAA,EAAG;EAC5C,MAAMrB,UAAU,CAACM,sBAAsB,CAACgB,2BAA2B,EAAEJ,mBAAmB,CAAC;AAC1F"},"metadata":{},"sourceType":"module","externalDependencies":[]}