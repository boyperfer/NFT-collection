{"ast":null,"code":"var _jsxFileName = \"/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/components/deposit-bank/deposit-bank.component.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomButton from '../../components/custom-buttons/custom-button.component';\nimport { TitleContainer, ButtonsContainer, DepositContainer } from './deposit-bank.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DepositBank = ({\n  paymentType\n}) => {\n  _s();\n  const currentUser = useSelector(selectCurrentUser);\n  const {\n    trader_id\n  } = currentUser;\n  console.log(paymentType);\n  let date = new Date();\n  date = date.toISOString().split('T')[0];\n  const [payment, setPayment] = useState({\n    amount: '',\n    paymentAddress: ''\n  });\n  const {\n    amount,\n    paymentAddress\n  } = payment;\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPayment({\n      ...payment,\n      [name]: value\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(event, 1);\n    // Send login request to the server\n    fetch(`http://localhost:3002/depositBank/${trader_id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        paymentAddress,\n        amount,\n        date,\n        paymentType\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      console.log(data.result[0].trader_id);\n      // Handle the login response accordingly\n      // For simplicity, just logging the response to the console\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DepositContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TitleContainer, {\n      children: \"Deposit by Bank transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        handleChange: handleChange,\n        label: \"Payment Address\",\n        name: \"paymentAddress\",\n        type: \"text\",\n        value: paymentAddress,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        handleChange: handleChange,\n        label: \"Amount\",\n        name: \"amount\",\n        type: \"text\",\n        value: amount,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ButtonsContainer, {\n        children: /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n};\n_s(DepositBank, \"S5eIegFx4UJ23fjjl+aAfP6kU8Y=\", false, function () {\n  return [useSelector];\n});\n_c = DepositBank;\nexport default DepositBank;\nvar _c;\n$RefreshReg$(_c, \"DepositBank\");","map":{"version":3,"names":["useState","useSelector","selectCurrentUser","FormInput","CustomButton","TitleContainer","ButtonsContainer","DepositContainer","jsxDEV","_jsxDEV","DepositBank","paymentType","_s","currentUser","trader_id","console","log","date","Date","toISOString","split","payment","setPayment","amount","paymentAddress","handleChange","event","name","value","target","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","result","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","type","required","_c","$RefreshReg$"],"sources":["/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/components/deposit-bank/deposit-bank.component.js"],"sourcesContent":["import {useState, } from 'react';\nimport { useSelector} from 'react-redux';\n\nimport {selectCurrentUser} from '../../redux/user/user.selectors';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomButton from '../../components/custom-buttons/custom-button.component';\n\nimport {TitleContainer, ButtonsContainer, DepositContainer} from './deposit-bank.styles';\n\nconst DepositBank = ({paymentType}) => {\n\tconst currentUser = useSelector(selectCurrentUser);\n\tconst {trader_id} = currentUser;\n\tconsole.log(paymentType)\n\n\tlet date = new Date();\n\tdate = date.toISOString().split('T')[0];\n\tconst [payment, setPayment] = useState({\n\t\tamount: '',\n\t\tpaymentAddress: '',\n\t});\n\n\tconst {amount, paymentAddress} = payment;\n\n\tconst handleChange = event => {\n\t\tconst {name, value} = event.target;\n\t\tsetPayment({...payment, [name]: value});\n\t};\n\n\tconst handleSubmit = event => {\n\t\tevent.preventDefault();\n\t\tconsole.log(event, 1);\n\t\t// Send login request to the server\n\t\tfetch(`http://localhost:3002/depositBank/${trader_id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({paymentAddress, amount, date, paymentType}),\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tconsole.log(data)\n\t\t\t\tconsole.log(data.result[0].trader_id);\n\t\t\t\t// Handle the login response accordingly\n\t\t\t\t// For simplicity, just logging the response to the console\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Error:', error);\n\t\t\t});\n\t};\n\treturn (\n\t\t<DepositContainer>\n\t\t\t<TitleContainer>\n\t\t\t\tDeposit by Bank transfer\n\t\t\t</TitleContainer>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<FormInput\n\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\tlabel='Payment Address'\n\t\t\t\t\tname='paymentAddress'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={paymentAddress}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<FormInput\n\t\t\t\t\thandleChange={handleChange}\n\t\t\t\t\tlabel='Amount'\n\t\t\t\t\tname='amount'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={amount}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<ButtonsContainer>\n\t\t\t\t\t<CustomButton type='submit'>Submit</CustomButton>\n\t\t\t\t</ButtonsContainer>\n\t\t\t</form>\n\t\t</DepositContainer>\n\t);\n};\n\nexport default DepositBank;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}