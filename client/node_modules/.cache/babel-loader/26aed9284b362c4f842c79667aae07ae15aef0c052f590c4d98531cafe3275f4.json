{"ast":null,"code":"var _jsxFileName = \"/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/components/transaction/transaction.component.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTransactions } from '../../redux/transaction/transaction.selectors';\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\nimport { shortenAddress, getCentralTime } from '../../utils';\nimport CustomButton from '../custom-buttons/custom-button.component';\nimport { TransactionContainer, HeaderContainer, TypeContainer, DateContainer, TableContainer, AmountContainer, TransferContainer, MoneyContainer } from './transaction.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transaction = () => {\n  _s();\n  const transactions = useSelector(selectTransactions);\n  const currentUser = useSelector(selectCurrentUser);\n  const currentDate = new Date();\n  const currentMinutes = currentDate.getMinutes();\n  console.log(currentMinutes);\n  const filteredTransactions = transactions.filter(transaction => transaction.trader_id === currentUser.trader_id);\n  const handleSubmit = (different, amount_paid, payment_date, transaction_id, payment_type) => {\n    if (different > 15 || payment_type == \"Ethereum Network\") {\n      alert(\"The transaction is finalized. You cannot cancel\");\n    }\n    {\n      fetch(`http://localhost:3002/cancellation/${currentUser.trader_id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount_paid,\n          payment_date,\n          transaction_id\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          // paymentType == \"Bank Transfer\" ? \n          // \tdispatch(setBalance(currentUser.balance + parseInt(amount))) : \n          // \tdispatch(setEthereum(currentUser.ethereum_balance + parseInt(amount)));\n          // navigate('/');\n        } else {\n          alert('The transaction was failed');\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderContainer, {\n      children: \"Transfer History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), filteredTransactions.map(({\n      payment_type,\n      amount_paid,\n      payment_date,\n      payment_address,\n      transaction_id\n    }, i) => {\n      const date = new Date(payment_date);\n      const different = (currentDate.getTime() - date.getTime()) / (1000 * 60);\n      return /*#__PURE__*/_jsxDEV(TransferContainer, {\n        children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n          children: [/*#__PURE__*/_jsxDEV(TypeContainer, {\n            children: [\"Deposit via \", payment_type, \" \", shortenAddress(payment_address)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(DateContainer, {\n            children: getCentralTime(payment_date).slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AmountContainer, {\n          children: /*#__PURE__*/_jsxDEV(MoneyContainer, {\n            children: payment_type == \"Bank Transfer\" ? `$${amount_paid} USD` : `${amount_paid} ETH`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          onClick: () => handleSubmit(different, amount_paid, payment_date, transaction_id),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(Transaction, \"0ufdqJu/PBszN+z+AOpPXQPDhQk=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Transaction;\nexport default Transaction;\nvar _c;\n$RefreshReg$(_c, \"Transaction\");","map":{"version":3,"names":["React","useSelector","selectTransactions","selectCurrentUser","shortenAddress","getCentralTime","CustomButton","TransactionContainer","HeaderContainer","TypeContainer","DateContainer","TableContainer","AmountContainer","TransferContainer","MoneyContainer","jsxDEV","_jsxDEV","Transaction","_s","transactions","currentUser","currentDate","Date","currentMinutes","getMinutes","console","log","filteredTransactions","filter","transaction","trader_id","handleSubmit","different","amount_paid","payment_date","transaction_id","payment_type","alert","fetch","method","headers","body","JSON","stringify","then","response","json","data","success","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","payment_address","i","date","getTime","slice","onClick","_c","$RefreshReg$"],"sources":["/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/components/transaction/transaction.component.js"],"sourcesContent":["import React from 'react'\nimport {useSelector} from 'react-redux';\n\nimport {selectTransactions} from '../../redux/transaction/transaction.selectors';\nimport {selectCurrentUser} from '../../redux/user/user.selectors';\nimport { shortenAddress, getCentralTime } from '../../utils';\nimport CustomButton from '../custom-buttons/custom-button.component';\n\nimport {\n\tTransactionContainer,\n\tHeaderContainer,\n\tTypeContainer,\n\tDateContainer,\n\tTableContainer,\n\tAmountContainer,\n\tTransferContainer,\n\tMoneyContainer\n} from './transaction.styles';\n\nconst Transaction = () => {\n\tconst transactions = useSelector(selectTransactions)\t\n\tconst currentUser = useSelector(selectCurrentUser)\n\tconst currentDate = new Date();\n\tconst currentMinutes = currentDate.getMinutes();\n\tconsole.log(currentMinutes)\n\n\tconst filteredTransactions = transactions.filter(transaction => transaction.trader_id === currentUser.trader_id);\n\tconst handleSubmit = (different, amount_paid, payment_date, transaction_id, payment_type) => {\n\t\tif (different > 15 || payment_type == \"Ethereum Network\") {\n\t\t\talert(\"The transaction is finalized. You cannot cancel\")\n\t\t} {\n\t\tfetch(`http://localhost:3002/cancellation/${currentUser.trader_id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({amount_paid, payment_date, transaction_id}),\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif(data.success) {\n\t\t\t\t\t// paymentType == \"Bank Transfer\" ? \n\t\t\t\t\t// \tdispatch(setBalance(currentUser.balance + parseInt(amount))) : \n\t\t\t\t\t// \tdispatch(setEthereum(currentUser.ethereum_balance + parseInt(amount)));\n\t\t\t\t\t// navigate('/');\n\n\t\t\t\t} else {\n\t\t\t\t\talert('The transaction was failed');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Error:', error);\n\t\t\t});\n\t\t}\n\t};\n\n\n    return (\n        <TransactionContainer>\n\t\t\t<HeaderContainer>Transfer History</HeaderContainer>\n\t\t{\n\t\t\tfilteredTransactions.map(({payment_type, amount_paid, payment_date, payment_address, transaction_id}, i) => { \n\t\t\t\tconst date = new Date(payment_date);\n\t\t\t\tconst different = (currentDate.getTime() - date.getTime()) / (1000 * 60);   \n\t\t\t\treturn (<TransferContainer>\n\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t<TypeContainer>Deposit via {payment_type} {shortenAddress(payment_address)}</TypeContainer>\n\t\t\t\t\t\t<DateContainer>{getCentralTime(payment_date).slice(0,10)}</DateContainer>\n\t\t\t\t\t</TableContainer>\n\t\t\t\t\t<AmountContainer>\n\t\t\t\t\t\t<MoneyContainer>{payment_type == \"Bank Transfer\" ? `$${amount_paid} USD` : `${amount_paid} ETH`}</MoneyContainer>\n\t\t\t\t\t</AmountContainer>\n\t\t\t\t\t<div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<CustomButton onClick={() => handleSubmit(different, amount_paid, payment_date, transaction_id) }>\n\t\t\t\t\t\tCancel\t\n\t\t\t\t\t</CustomButton>\n\t\t\t\t</TransferContainer>)\n\t\t\t})\n\t\t}\n        </TransactionContainer>\n)}\n\n\nexport default Transaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}