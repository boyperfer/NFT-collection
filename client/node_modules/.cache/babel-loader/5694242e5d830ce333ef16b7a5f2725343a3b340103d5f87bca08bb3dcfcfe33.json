{"ast":null,"code":"export const shortenAddress = address => {\n  const prefixLength = 4;\n  const suffixLength = 4;\n  if (address.length <= prefixLength + suffixLength) {\n    return address; // No need to shorten\n  }\n\n  const prefix = address.slice(0, Math.max(0, prefixLength));\n  const suffix = address.slice(Math.max(0, address.length - suffixLength));\n  return `${prefix}...${suffix}`;\n};\nexport const getCentralTime = time => {\n  // Convert UTC timestamp to a JavaScript Date object\n  const date = new Date(time);\n\n  // Specify the timezone (in this case, \"America/Chicago\" for Central Time)\n  const timeZone = \"America/Chicago\";\n\n  // Create a formatter with the desired options\n  // const formatter = new Intl.DateTimeFormat(\"en-US\", {\n  //   timeZone,\n  //   year: \"numeric\",\n  //   month: \"numeric\",\n  //   day: \"numeric\",\n  //   hour: \"numeric\",\n  //   minute: \"numeric\",\n  //   second: \"numeric\",\n  //   timeZoneName: \"short\",\n  // });\n\n  const formatter = new Intl.DateTimeFormat(\"en-US\", {\n    timeZone\n  });\n\n  // Format the date and log the result\n  const centralTime = formatter.format(date);\n  return centralTime;\n};","map":{"version":3,"names":["shortenAddress","address","prefixLength","suffixLength","length","prefix","slice","Math","max","suffix","getCentralTime","time","date","Date","timeZone","formatter","Intl","DateTimeFormat","centralTime","format"],"sources":["/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/utils.js"],"sourcesContent":["export const shortenAddress = (address) => {\n\tconst prefixLength = 4;\n\tconst suffixLength = 4;\n\n\tif (address.length <= prefixLength + suffixLength) {\n\t\treturn address; // No need to shorten\n\t}\n\n\tconst prefix = address.slice(0, Math.max(0, prefixLength));\n\tconst suffix = address.slice(Math.max(0, address.length - suffixLength));\n\n\treturn `${prefix}...${suffix}`;\n};\n\nexport const getCentralTime = (time) => {\n\t// Convert UTC timestamp to a JavaScript Date object\n\tconst date = new Date(time);\n\n\t// Specify the timezone (in this case, \"America/Chicago\" for Central Time)\n\tconst timeZone = \"America/Chicago\";\n\n\t// Create a formatter with the desired options\n\t// const formatter = new Intl.DateTimeFormat(\"en-US\", {\n\t//   timeZone,\n\t//   year: \"numeric\",\n\t//   month: \"numeric\",\n\t//   day: \"numeric\",\n\t//   hour: \"numeric\",\n\t//   minute: \"numeric\",\n\t//   second: \"numeric\",\n\t//   timeZoneName: \"short\",\n\t// });\n\n\tconst formatter = new Intl.DateTimeFormat(\"en-US\", {\n\t  timeZone,\n\t});\n\n\t// Format the date and log the result\n\tconst centralTime = formatter.format(date);\n\treturn centralTime\n}\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,OAAO,IAAK;EAC1C,MAAMC,YAAY,GAAG,CAAC;EACtB,MAAMC,YAAY,GAAG,CAAC;EAEtB,IAAIF,OAAO,CAACG,MAAM,IAAIF,YAAY,GAAGC,YAAY,EAAE;IAClD,OAAOF,OAAO,CAAC,CAAC;EACjB;;EAEA,MAAMI,MAAM,GAAGJ,OAAO,CAACK,KAAK,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEN,YAAY,CAAC,CAAC;EAC1D,MAAMO,MAAM,GAAGR,OAAO,CAACK,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACG,MAAM,GAAGD,YAAY,CAAC,CAAC;EAExE,OAAQ,GAAEE,MAAO,MAAKI,MAAO,EAAC;AAC/B,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,IAAI,IAAK;EACvC;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;;EAE3B;EACA,MAAMG,QAAQ,GAAG,iBAAiB;;EAElC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;IACjDH;EACF,CAAC,CAAC;;EAEF;EACA,MAAMI,WAAW,GAAGH,SAAS,CAACI,MAAM,CAACP,IAAI,CAAC;EAC1C,OAAOM,WAAW;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}