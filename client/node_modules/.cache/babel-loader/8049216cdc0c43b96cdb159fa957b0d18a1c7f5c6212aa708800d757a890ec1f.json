{"ast":null,"code":"var _jsxFileName = \"/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/pages/transaction/transaction.page.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/header/header.component';\nimport { selectNFTs } from '../../redux/nft/nft.selectors';\nimport { fetchNFTTransactionStart } from '../../redux/transaction/transaction.actions';\nimport { selectNFTTransactions } from '../../redux/transaction/transaction.selectors';\nimport { selectCurrentUser, selectUsers } from '../../redux/user/user.selectors';\nimport { shortenAddress, getCentralTime } from '../../utils';\nimport { TransactionContainer, HeaderContainer, TransferContainer, TextContainer } from './transaction-page.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchNFTTransactionStart());\n  }, [dispatch]);\n  const transactions = useSelector(selectNFTTransactions);\n  const nfts = useSelector(selectNFTs);\n  const currentUser = useSelector(selectCurrentUser);\n  const users = useSelector(selectUsers);\n  const filteredTransactions = transactions.filter(transaction => transaction.buyer === currentUser.trader_id);\n  return /*#__PURE__*/_jsxDEV(TransactionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(HeaderContainer, {\n      children: \"Transaction History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TransferContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"Contract address \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"Token ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"From\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"To\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: \"Fee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this), filteredTransactions.map(({\n      commission_fee,\n      transaction_amount,\n      contract_address,\n      buyer,\n      seller,\n      transaction_timestamp,\n      nft_id\n    }, i) => /*#__PURE__*/_jsxDEV(TransferContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TextContainer, {\n        children: shortenAddress(contract_address)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: nfts[nft_id - 1].token_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: getCentralTime(transaction_timestamp).slice(0, 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: shortenAddress(users[seller].ethereum_address)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: users[buyer].ethereum_address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: transaction_amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n        children: commission_fee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionPage, \"mRalsaZuITpG7IVnr4/fUSfgbMs=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = TransactionPage;\nexport default TransactionPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionPage\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","Header","selectNFTs","fetchNFTTransactionStart","selectNFTTransactions","selectCurrentUser","selectUsers","shortenAddress","getCentralTime","TransactionContainer","HeaderContainer","TransferContainer","TextContainer","jsxDEV","_jsxDEV","TransactionPage","_s","dispatch","transactions","nfts","currentUser","users","filteredTransactions","filter","transaction","buyer","trader_id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","commission_fee","transaction_amount","contract_address","seller","transaction_timestamp","nft_id","i","token_id","slice","ethereum_address","_c","$RefreshReg$"],"sources":["/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/pages/transaction/transaction.page.js"],"sourcesContent":["import React, {useEffect} from 'react'\nimport {useSelector, useDispatch} from 'react-redux';\nimport Header from '../../components/header/header.component';\nimport {selectNFTs} from '../../redux/nft/nft.selectors';\nimport {fetchNFTTransactionStart} from '../../redux/transaction/transaction.actions';\nimport {selectNFTTransactions} from '../../redux/transaction/transaction.selectors';\nimport {selectCurrentUser, selectUsers} from '../../redux/user/user.selectors';\nimport { shortenAddress, getCentralTime } from '../../utils';\n\nimport {\n\tTransactionContainer,\n\tHeaderContainer,\n\tTransferContainer,\n\tTextContainer\n} from './transaction-page.styles';\n\nconst TransactionPage = () => {\n\tconst dispatch = useDispatch()\n\n\tuseEffect(() => {\n\t\tdispatch(fetchNFTTransactionStart())\n\t}, [dispatch]);\n\n\tconst transactions = useSelector(selectNFTTransactions)\t\n\tconst nfts = useSelector(selectNFTs)\n\tconst currentUser = useSelector(selectCurrentUser)\n\tconst users = useSelector(selectUsers)\n\n\tconst filteredTransactions = transactions.filter(transaction => transaction.buyer === currentUser.trader_id);\n\n    return (\n        <TransactionContainer>\n\t\t\t<Header/>\n\t\t\t<HeaderContainer>Transaction History</HeaderContainer>\n\t\t\t<TransferContainer>\n\t\t\t\t\t<TextContainer>Contract address </TextContainer>\n\t\t\t\t\t<TextContainer>Token ID</TextContainer>\n\t\t\t\t\t<TextContainer>Date</TextContainer>\n\t\t\t\t\t<TextContainer>From</TextContainer>\n\t\t\t\t\t<TextContainer>To</TextContainer>\n\t\t\t\t\t<TextContainer>Value</TextContainer>\n\t\t\t\t\t<TextContainer>Fee</TextContainer>\n\t\t\t</TransferContainer>\n\t\t{\n\t\t\tfilteredTransactions.map(({commission_fee, transaction_amount, contract_address, \n\t\t\t\tbuyer, seller, transaction_timestamp, nft_id}, i) => ( \n\t\t\t\t<TransferContainer>\n\t\t\t\t\t\t<TextContainer>{shortenAddress(contract_address)}</TextContainer>\n\t\t\t\t\t\t<TextContainer>{nfts[nft_id-1].token_id}</TextContainer>\n\t\t\t\t\t\t<TextContainer>{getCentralTime(transaction_timestamp).slice(0,10)}</TextContainer>\n\t\t\t\t\t\t<TextContainer>{shortenAddress(users[seller].ethereum_address)}</TextContainer>\n\t\t\t\t\t\t<TextContainer>{users[buyer].ethereum_address}</TextContainer>\n\t\t\t\t\t\t<TextContainer>{transaction_amount}</TextContainer>\n\t\t\t\t\t\t<TextContainer>{commission_fee}</TextContainer>\n\t\t\t\t</TransferContainer>\n\t\t\t))\n\t\t}\n        </TransactionContainer>\n)}\n\n\nexport default TransactionPage;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}