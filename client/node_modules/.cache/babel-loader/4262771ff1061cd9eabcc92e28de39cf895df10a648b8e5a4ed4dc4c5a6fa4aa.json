{"ast":null,"code":"var _jsxFileName = \"/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/components/transaction/transaction.component.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport { selectTransactions } from '../../redux/transaction/transaction.selectors';\nimport { setBalance } from '../../redux/user/user.actions';\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\nimport { shortenAddress, getCentralTime } from '../../utils';\nimport CustomButton from '../custom-buttons/custom-button.component';\nimport { TransactionContainer, HeaderContainer, TypeContainer, DateContainer, TableContainer, AmountContainer, TransferContainer, MoneyContainer, StatusContainer } from './transaction.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transaction = () => {\n  _s();\n  const dispatch = useDispatch();\n  const transactions = useSelector(selectTransactions);\n  const navigate = useNavigate();\n  const currentUser = useSelector(selectCurrentUser);\n  const currentDate = new Date();\n  const currentMinutes = currentDate.getMinutes();\n  console.log(currentMinutes);\n  const filteredTransactions = transactions.filter(transaction => transaction.trader_id === currentUser.trader_id);\n  const handleSubmit = (different, amount_paid, payment_date, transaction_id, payment_type, status) => {\n    console.log(payment_type);\n    if (status === \"FINALIZED\" || payment_type === \"Ethereum Network\" || status === \"CANCELED\") {\n      alert(\"The transaction is finalized or canceled. You cannot cancel\");\n    } else {\n      fetch(`http://localhost:3002/cancellation/${currentUser.trader_id}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount_paid,\n          transaction_id\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          alert(\"The transaction is canceled successfully\");\n          dispatch(setBalance(currentUser.balance - parseInt(amount_paid)));\n          navigate('/');\n        } else {\n          alert('The cancellation was failed');\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderContainer, {\n      children: \"Transfer History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), filteredTransactions.map(({\n      payment_type,\n      amount_paid,\n      payment_date,\n      payment_address,\n      transaction_id,\n      status\n    }, i) => {\n      const date = new Date(payment_date);\n      const different = (currentDate.getTime() - date.getTime()) / (1000 * 60);\n      return /*#__PURE__*/_jsxDEV(TransferContainer, {\n        children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n          children: [/*#__PURE__*/_jsxDEV(TypeContainer, {\n            children: [\"Deposit via \", payment_type, \" \", shortenAddress(payment_address)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(DateContainer, {\n            children: getCentralTime(payment_date).slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AmountContainer, {\n          children: /*#__PURE__*/_jsxDEV(MoneyContainer, {\n            children: payment_type === \"Bank Transfer\" ? `$${amount_paid} USD` : `${amount_paid} ETH`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(StatusContainer, {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          onClick: () => {\n            handleSubmit(different, amount_paid, payment_date, transaction_id, payment_type, status);\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(Transaction, \"Bsef4lMwpFc4aTV4CbRh7+QZ6eY=\", false, function () {\n  return [useDispatch, useSelector, useNavigate, useSelector];\n});\n_c = Transaction;\nexport default Transaction;\nvar _c;\n$RefreshReg$(_c, \"Transaction\");","map":{"version":3,"names":["React","useSelector","useDispatch","useNavigate","selectTransactions","setBalance","selectCurrentUser","shortenAddress","getCentralTime","CustomButton","TransactionContainer","HeaderContainer","TypeContainer","DateContainer","TableContainer","AmountContainer","TransferContainer","MoneyContainer","StatusContainer","jsxDEV","_jsxDEV","Transaction","_s","dispatch","transactions","navigate","currentUser","currentDate","Date","currentMinutes","getMinutes","console","log","filteredTransactions","filter","transaction","trader_id","handleSubmit","different","amount_paid","payment_date","transaction_id","payment_type","status","alert","fetch","method","headers","body","JSON","stringify","then","response","json","data","success","balance","parseInt","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","payment_address","i","date","getTime","slice","onClick","_c","$RefreshReg$"],"sources":["/home/boyperfer/Desktop/UTD/cs-6360/nft/client/src/components/transaction/transaction.component.js"],"sourcesContent":["import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux';\nimport { useNavigate } from 'react-router';\n\nimport {selectTransactions} from '../../redux/transaction/transaction.selectors';\nimport {setBalance} from '../../redux/user/user.actions';\nimport {selectCurrentUser} from '../../redux/user/user.selectors';\nimport { shortenAddress, getCentralTime } from '../../utils';\nimport CustomButton from '../custom-buttons/custom-button.component';\n\nimport {\n\tTransactionContainer,\n\tHeaderContainer,\n\tTypeContainer,\n\tDateContainer,\n\tTableContainer,\n\tAmountContainer,\n\tTransferContainer,\n\tMoneyContainer,\n\tStatusContainer\n} from './transaction.styles';\n\nconst Transaction = () => {\n\tconst dispatch = useDispatch();\n\tconst transactions = useSelector(selectTransactions)\t\n\tconst navigate = useNavigate();\n\tconst currentUser = useSelector(selectCurrentUser)\n\tconst currentDate = new Date();\n\tconst currentMinutes = currentDate.getMinutes();\n\tconsole.log(currentMinutes)\n\n\tconst filteredTransactions = transactions.filter(transaction => (transaction.trader_id === currentUser.trader_id));\n\tconst handleSubmit = (different, amount_paid, payment_date, transaction_id, payment_type, status) => {\n\t\tconsole.log(payment_type);\n\t\tif (status === \"FINALIZED\" || payment_type === \"Ethereum Network\" || status === \"CANCELED\") {\n\t\t\talert(\"The transaction is finalized or canceled. You cannot cancel\")\n\t\t} else {\n\t\tfetch(`http://localhost:3002/cancellation/${currentUser.trader_id}`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({amount_paid, transaction_id}),\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tif(data.success) {\n\t\t\t\t\talert(\"The transaction is canceled successfully\");\n\t\t\t\t\tdispatch(setBalance(currentUser.balance - parseInt(amount_paid)));  \n\t\t\t\t\tnavigate('/');\n\n\t\t\t\t} else {\n\t\t\t\t\talert('The cancellation was failed');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Error:', error);\n\t\t\t});\n\t\t}\n\t};\n\n\n    return (\n        <TransactionContainer>\n\t\t\t<HeaderContainer>Transfer History</HeaderContainer>\n\t\t{\n\t\t\tfilteredTransactions.map(({payment_type, amount_paid, payment_date, payment_address, transaction_id, status}, i) => { \n\t\t\t\tconst date = new Date(payment_date);\n\t\t\t\tconst different = (currentDate.getTime() - date.getTime()) / (1000 * 60);   \n\t\t\t\treturn (<TransferContainer>\n\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t<TypeContainer>Deposit via {payment_type} {shortenAddress(payment_address)}</TypeContainer>\n\t\t\t\t\t\t<DateContainer>{getCentralTime(payment_date).slice(0,10)}</DateContainer>\n\t\t\t\t\t</TableContainer>\n\t\t\t\t\t<AmountContainer>\n\t\t\t\t\t\t<MoneyContainer>{payment_type === \"Bank Transfer\" ? `$${amount_paid} USD` : `${amount_paid} ETH`}</MoneyContainer>\n\t\t\t\t\t</AmountContainer>\n\t\t\t\t\t<StatusContainer>\n\t\t\t\t\t\t{status}\n\t\t\t\t\t</StatusContainer>\n\t\t\t\t\t<CustomButton onClick={() =>{ \n\t\t\t\t\t\thandleSubmit(different, amount_paid, payment_date, transaction_id, payment_type, status);\n\t\t\t\t\t}}>\n\t\t\t\t\t\tCancel\t\n\t\t\t\t\t</CustomButton>\n\t\t\t\t</TransferContainer>)\n\t\t\t})\n\t\t}\n        </TransactionContainer>\n)}\n\n\nexport default Transaction;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,EAAEC,WAAW,QAAO,aAAa;AACpD,SAASC,WAAW,QAAQ,cAAc;AAE1C,SAAQC,kBAAkB,QAAO,+CAA+C;AAChF,SAAQC,UAAU,QAAO,+BAA+B;AACxD,SAAQC,iBAAiB,QAAO,iCAAiC;AACjE,SAASC,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAC5D,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,SACCC,oBAAoB,EACpBC,eAAe,EACfC,aAAa,EACbC,aAAa,EACbC,cAAc,EACdC,eAAe,EACfC,iBAAiB,EACjBC,cAAc,EACdC,eAAe,QACT,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,MAAMsB,YAAY,GAAGvB,WAAW,CAACG,kBAAkB,CAAC;EACpD,MAAMqB,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9B,MAAMuB,WAAW,GAAGzB,WAAW,CAACK,iBAAiB,CAAC;EAClD,MAAMqB,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMC,cAAc,GAAGF,WAAW,CAACG,UAAU,CAAC,CAAC;EAC/CC,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;EAE3B,MAAMI,oBAAoB,GAAGT,YAAY,CAACU,MAAM,CAACC,WAAW,IAAKA,WAAW,CAACC,SAAS,KAAKV,WAAW,CAACU,SAAU,CAAC;EAClH,MAAMC,YAAY,GAAGA,CAACC,SAAS,EAAEC,WAAW,EAAEC,YAAY,EAAEC,cAAc,EAAEC,YAAY,EAAEC,MAAM,KAAK;IACpGZ,OAAO,CAACC,GAAG,CAACU,YAAY,CAAC;IACzB,IAAIC,MAAM,KAAK,WAAW,IAAID,YAAY,KAAK,kBAAkB,IAAIC,MAAM,KAAK,UAAU,EAAE;MAC3FC,KAAK,CAAC,6DAA6D,CAAC;IACrE,CAAC,MAAM;MACPC,KAAK,CAAE,sCAAqCnB,WAAW,CAACU,SAAU,EAAC,EAAE;QACpEU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACR,cAAc,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACX,WAAW;UAAEE;QAAc,CAAC;MACnD,CAAC,CAAC,CACAU,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACb,IAAGA,IAAI,CAACC,OAAO,EAAE;UAChBX,KAAK,CAAC,0CAA0C,CAAC;UACjDrB,QAAQ,CAAClB,UAAU,CAACqB,WAAW,CAAC8B,OAAO,GAAGC,QAAQ,CAAClB,WAAW,CAAC,CAAC,CAAC;UACjEd,QAAQ,CAAC,GAAG,CAAC;QAEd,CAAC,MAAM;UACNmB,KAAK,CAAC,6BAA6B,CAAC;QACrC;MAED,CAAC,CAAC,CACDc,KAAK,CAACC,KAAK,IAAI;QACf5B,OAAO,CAAC4B,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC/B,CAAC,CAAC;IACH;EACD,CAAC;EAGE,oBACIvC,OAAA,CAACV,oBAAoB;IAAAkD,QAAA,gBAC1BxC,OAAA,CAACT,eAAe;MAAAiD,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAAC,EAEnD/B,oBAAoB,CAACgC,GAAG,CAAC,CAAC;MAACvB,YAAY;MAAEH,WAAW;MAAEC,YAAY;MAAE0B,eAAe;MAAEzB,cAAc;MAAEE;IAAM,CAAC,EAAEwB,CAAC,KAAK;MACnH,MAAMC,IAAI,GAAG,IAAIxC,IAAI,CAACY,YAAY,CAAC;MACnC,MAAMF,SAAS,GAAG,CAACX,WAAW,CAAC0C,OAAO,CAAC,CAAC,GAAGD,IAAI,CAACC,OAAO,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,CAAC;MACxE,oBAAQjD,OAAA,CAACJ,iBAAiB;QAAA4C,QAAA,gBACzBxC,OAAA,CAACN,cAAc;UAAA8C,QAAA,gBACdxC,OAAA,CAACR,aAAa;YAAAgD,QAAA,GAAC,cAAY,EAAClB,YAAY,EAAC,GAAC,EAACnC,cAAc,CAAC2D,eAAe,CAAC;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAgB,CAAC,eAC3F5C,OAAA,CAACP,aAAa;YAAA+C,QAAA,EAAEpD,cAAc,CAACgC,YAAY,CAAC,CAAC8B,KAAK,CAAC,CAAC,EAAC,EAAE;UAAC;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAgB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC,eACjB5C,OAAA,CAACL,eAAe;UAAA6C,QAAA,eACfxC,OAAA,CAACH,cAAc;YAAA2C,QAAA,EAAElB,YAAY,KAAK,eAAe,GAAI,IAAGH,WAAY,MAAK,GAAI,GAAEA,WAAY;UAAK;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAiB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClG,CAAC,eAClB5C,OAAA,CAACF,eAAe;UAAA0C,QAAA,EACdjB;QAAM;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACS,CAAC,eAClB5C,OAAA,CAACX,YAAY;UAAC8D,OAAO,EAAEA,CAAA,KAAK;YAC3BlC,YAAY,CAACC,SAAS,EAAEC,WAAW,EAAEC,YAAY,EAAEC,cAAc,EAAEC,YAAY,EAAEC,MAAM,CAAC;UACzF,CAAE;UAAAiB,QAAA,EAAC;QAEH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IACrB,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEyB,CAAC;AAC9B,CAAC;AAAA1C,EAAA,CApEID,WAAW;EAAA,QACCnB,WAAW,EACPD,WAAW,EACfE,WAAW,EACRF,WAAW;AAAA;AAAAuE,EAAA,GAJ1BnD,WAAW;AAuEjB,eAAeA,WAAW;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}